#
# This file is part of Mapnik (c++ mapping toolkit)
#
# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
#
# Mapnik is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# $Id$

import glob
import re
import os

Import('env')

prefix = env['PREFIX']
install_prefix = env['DESTDIR'] + '/' + prefix

linkflags = ''
libraries = ['mapnik','png','jpeg']
headers = [env['PYTHON_INCLUDES']] + env['CPPPATH']

if env['BOOST_PYTHON_LIB']:
    if os.path.sep in env['BOOST_PYTHON_LIB']:
        pylib_dir = os.path.dirname(env['BOOST_PYTHON_LIB'])
        env.Prepend(LIBPATH = pylib_dir)
        pylib_name = os.path.splitext(os.path.basename(env['BOOST_PYTHON_LIB']))[0].replace('lib','',1)
        libraries.append(pylib_name)
    else:
        libraries.append(env['BOOST_PYTHON_LIB'].replace('lib','',1))
else:
    libraries.append('boost_python%s' % env['BOOST_APPEND'])

if env['PLATFORM'] == 'Darwin':
    libraries.append(env['ICU_LIB_NAME'])
    libraries.append('boost_regex%s' % env['BOOST_APPEND'])
    if env['THREADING'] == 'multi':
        libraries.append('boost_thread%s' % env['BOOST_APPEND'])
    if '-DHAVE_CAIRO' in env['CXXFLAGS']:
        libraries.append([lib for lib in env['LIBS'] if lib.startswith('cairo')])

    ##### Python linking on OS X is tricky ### 
    # Confounding problems are:
    # 1) likelyhood of multiple python installs of the same major.minor version
    #  because apple supplies python built-in and many users may have installed 
    #  further versions using macports
    # 2) boost python directly links to a python version
    # 3) the below will directly link _mapnik.so to a python version
    # 4) _mapnik.so must link to the same python lib as boost_python.dylib otherwise
    # python will Abort with a Verion Mismatch error.
    # See http://trac.mapnik.org/ticket/453 for the seeds of a better approach
    # for now we offer control over method of direct linking...
    # The default below is to link against the python dylib in the form of
    #/path/to/Python.framework/Python instead of -lpython
    
    # http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/ld.1.html
    
    if env['FRAMEWORK_PYTHON']:
        if env['FRAMEWORK_SEARCH_PATH']:
            # if the user has supplied a custom root path to search for 
            # a given Python framework, then use that to direct the linker
            linkflags = '-F%s -framework Python -Z' % env['FRAMEWORK_SEARCH_PATH']
        else:
            # otherwise be as explicit as possible for linking to the same Framework
            # as the executable we are building with (or is pointed to by the PYTHON variable)
            # otherwise we may accidentally link against either:
            # /System/Library/Frameworks/Python.framework/Python/Versions/
            # or
            # /Library/Frameworks/Python.framework/Python/Versions/
            # See: http://trac.mapnik.org/ticket/380
            link_prefix = env['PYTHON_SYS_PREFIX']
            if '.framework' in link_prefix:
                linkflags = '-F%s -framework Python -Z' % os.path.dirname(link_prefix.split('.')[0])
            elif '/System' in link_prefix:
                linkflags = '-F/System/Library/Frameworks/ -framework Python -Z'
            else:
                # should we fall back to -lpython here?
                linkflags = '-F/ -framework Python'
            
    # if we are not linking to a framework then use the *nix standard approach
    else:
        linkflags = '-lpython%s' % env['PYTHON_VERSION']



paths = '''
"""Configuration paths of Mapnik fonts and input plugins (autogenerated by SCons)."""

import os

mapniklibpath = '%s'
'''

paths += "inputpluginspath = os.path.normpath(mapniklibpath + '/input')\n"

if env['SYSTEM_FONTS']:
    paths += "fontscollectionpath = os.path.normpath('%s')" % env['SYSTEM_FONTS']
else:
    paths += "fontscollectionpath = os.path.normpath(mapniklibpath + '/fonts')"


# write out the location of the 'mapniklibpath' into a python file
# so that the python module can locate it at runtime
exp =  r"%s{2,}" % os.sep
# Note: we use prefix rather than install_prefix here since install_prefix is for package building
# and we intend for python to look to the standard prefix location to find the fonts and plugins
mapnik_lib_path  = re.sub(exp,os.sep, prefix + '/' + env['LIBDIR_SCHEMA'] + env['LIB_DIR_NAME'])
file('mapnik/paths.py','w').write(paths % (mapnik_lib_path))

try:
    os.chmod('mapnik/paths.py',0666)
except: pass

# install the core mapnik python files, including '__init__.py' and 'paths.py'
init_files = glob.glob('mapnik/*.py')
init_module = env.Install(env['PYTHON_INSTALL_LOCATION'] + '/mapnik', init_files)
env.Alias(target='install', source=init_module)

# install the ogcserver module code
ogcserver_files = glob.glob('mapnik/ogcserver/*.py')
ogcserver_module = env.Install(env['PYTHON_INSTALL_LOCATION'] + '/mapnik/ogcserver', ogcserver_files)
env.Alias(target='install', source=ogcserver_module)


# install the shared object beside the module directory
_mapnik = env.LoadableModule('_mapnik', glob.glob('*.cpp'), LIBS=libraries, LDMODULEPREFIX='', LDMODULESUFFIX='.so', CPPPATH=headers,LINKFLAGS=linkflags)
pymapniklib = env.Install(env['PYTHON_INSTALL_LOCATION'] + '/mapnik',_mapnik)
env.Alias(target='install',source=pymapniklib)
